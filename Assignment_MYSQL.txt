use assignment;



CREATE TABLE categories (
    category_id SERIAL PRIMARY KEY,
    category_name VARCHAR(50) NOT NULL UNIQUE,
    description TEXT
);




CREATE TABLE suppliers (
    supplier_id SERIAL PRIMARY KEY,
    supplier_name VARCHAR(100) NOT NULL,
    contact_email VARCHAR(100),
    phone VARCHAR(20)
);




CREATE TABLE products (
    product_id SERIAL PRIMARY KEY,
    product_name VARCHAR(100) NOT NULL,
    category_id INT REFERENCES categories(category_id) ,
    supplier_id INT REFERENCES suppliers(supplier_id) ,
    price NUMERIC(10, 2) CHECK (price >= 0),
    stock_quantity INT CHECK (stock_quantity >= 0),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



INSERT INTO categories (category_name, description) VALUES
('Electronics', 'Devices and gadgets'),
('Books', 'Printed and digital books'),
('Clothing', 'Apparel and accessories');



INSERT INTO suppliers (supplier_name, contact_email, phone) VALUES
('Best Supplier Inc.', 'contact@bestsupplier.com', '123-456-7890'),
('Global Goods', 'sales@globalgoods.com', '987-654-3210');



INSERT INTO products (product_name, category_id, supplier_id, price, stock_quantity) VALUES
('Smartphone Model X', 1, 1, 699.99, 50),
('Wireless Headphones', 1, 2, 199.99, 30),
('Mystery Novel', 2, 1, 14.99, 100),
('T-shirt Classic', 3, 2, 9.99, 200),
('E-reader', 1, 1, 129.99, 10);



 SELECT * 
FROM products
WHERE stock_quantity < 5;

 ALTER TABLE products
ADD COLUMN discount_percent NUMERIC(5,2) DEFAULT 0;

 UPDATE products
SET price = price * 0.85
WHERE category_id = (SELECT category_id FROM categories WHERE category_name = 'Electronics');

 SELECT COUNT(*) AS total_products
FROM products;

SELECT AVG(price) AS average_price
FROM products;

 SELECT MAX(price) AS max_price, MIN(price) AS min_price
FROM products
WHERE category_id = (SELECT category_id FROM categories WHERE category_name = 'Electronics');

 SELECT c.category_name, COUNT(p.product_id) AS product_count
FROM categories c
LEFT JOIN products p ON c.category_id = p.category_id
GROUP BY c.category_name;

SELECT DISTINCT s.supplier_name
FROM suppliers s
JOIN products p ON s.supplier_id = p.supplier_id
WHERE p.price BETWEEN 50 AND 200;

 SELECT * FROM products
WHERE category_id IN (1,3);

 SELECT c.category_name, SUM(p.stock_quantity) AS total_stock
FROM categories c
JOIN products p ON c.category_id = p.category_id
GROUP BY c.category_name
HAVING COUNT(p.product_id) > 1;

SELECT 
    s.supplier_name,
    AVG(p.price) AS avg_price
FROM products p
JOIN suppliers s ON p.supplier_id = s.supplier_id
GROUP BY s.supplier_name
HAVING AVG(p.price) > 100;

 SELECT 
    product_name, 
    price
FROM products
ORDER BY price DESC;

 SELECT 
    c.category_name,
    SUM(p.price * p.stock_quantity) AS total_stock_value
FROM products p
JOIN categories c ON p.category_id = c.category_id
GROUP BY c.category_name
ORDER BY total_stock_value DESC;



 SELECT p.product_name, c.category_name
FROM products p
INNER JOIN categories c ON p.category_id = c.category_id;

SELECT p.product_name, c.category_name
FROM products p
LEFT JOIN categories c ON p.category_id = c.category_id;

SELECT c.category_name, COUNT(p.product_id) AS product_count
FROM categories c
LEFT JOIN products p ON c.category_id = p.category_id
GROUP BY c.category_name;

SELECT p.product_name, s.supplier_name
FROM products p
LEFT JOIN suppliers s ON p.supplier_id = s.supplier_id;

 SELECT s.supplier_name, p.product_name
FROM products p
RIGHT JOIN suppliers s ON p.supplier_id = s.supplier_id;

 SELECT * FROM products
WHERE supplier_id IS NULL;

 SELECT p.product_name, c.category_name, s.supplier_name
FROM products p
JOIN categories c ON p.category_id = c.category_id
JOIN suppliers s ON p.supplier_id = s.supplier_id;

 SELECT s.supplier_name, c.category_name
FROM suppliers s
LEFT JOIN products p ON s.supplier_id = p.supplier_id
LEFT JOIN categories c ON p.category_id = c.category_id

UNION

SELECT s.supplier_name, c.category_name
FROM suppliers s
RIGHT JOIN products p ON s.supplier_id = p.supplier_id
RIGHT JOIN categories c ON p.category_id = c.category_id;


 SELECT p.product_name, s.contact_email
FROM products p
JOIN suppliers s ON p.supplier_id = s.supplier_id
WHERE s.contact_email IS NOT NULL;

 SELECT DISTINCT c.category_name
FROM categories c
JOIN products p ON c.category_id = p.category_id
JOIN suppliers s ON p.supplier_id = s.supplier_id
WHERE s.supplier_name = 'Global Goods';


DELIMITER $$

CREATE FUNCTION total_stock_available(supplier_name_input VARCHAR(100))
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE total_stock INT;

    SELECT SUM(p.stock_quantity)
    INTO total_stock
    FROM products p
    JOIN suppliers s ON p.supplier_id = s.supplier_id
    WHERE s.supplier_name = supplier_name_input;

    RETURN IFNULL(total_stock, 0);
END$$

DELIMITER ;

SELECT total_stock_available('Best Supplier Inc.');

DELIMITER $$

CREATE FUNCTION get_product_by_email_and_category(
    supplier_email_input VARCHAR(100),
    category_id_input INT
)
RETURNS VARCHAR(100)
DETERMINISTIC
BEGIN
    DECLARE product_name_result VARCHAR(100);

    SELECT p.product_name
    INTO product_name_result
    FROM products p
    JOIN suppliers s ON p.supplier_id = s.supplier_id
    WHERE s.contact_email = supplier_email_input
      AND p.category_id = category_id_input
    LIMIT 1;

    RETURN product_name_result;
END$$

DELIMITER ;

SELECT get_product_by_email_and_category('sales@globalgoods.com', 1);

DELIMITER $$

CREATE PROCEDURE get_all_products()
BEGIN
    SELECT * FROM products;
END$$

DELIMITER ;


CALL get_all_products();

DELIMITER $$

CREATE PROCEDURE get_total_stock_by_category(IN cat_id INT)
BEGIN
    SELECT SUM(stock_quantity) AS total_stock
    FROM products
    WHERE category_id = cat_id;
END$$

DELIMITER ;

CALL get_total_stock_by_category(1);

