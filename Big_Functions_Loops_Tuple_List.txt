Problem Statement: Product Inventory Management System

A retail store wants to digitally manage its inventory using Python.
You are asked to design a program that allows the store to:

Store product details

Perform common operations like viewing, adding, updating, and calculating total inventory value

The program should use functions, loops, lists, and tuples effectively.



- Each product should have Name, Price, and Quantity.
- Store this information as a tuple : (name, price, quantity).
- Maintain a collection of products as a list of tuples.

Example:

products = [
    ("Laptop", 50000, 10),
    ("Mobile", 20000, 15),
    ("Headphones", 1500, 25)
]


(a) Function to Display Products
   - Create a function display_products() that:
   - Iterates over the list of products (using a loop).
   - Prints product details (name, price, quantity).


(b) Function to Add a New Product
   - Create a function add_product(name, price, qty) that:
   - Takes product details as parameters.
   - Adds the new product (tuple) into the products list.


(c) Function to Update Stock Quantity
   - Create a function update_stock(product_name, new_qty) that:
   - Loops through the products list.
   - Finds the product by name.
   - Updates its quantity to the new value.


(d) Function to Calculate Total Inventory Value
   - Create a function total_value() that:
   - Iterates over all products.
   - Multiplies price Ã— quantity for each product.
   - Returns the sum of all values.


Create a Menu-Driven Program (Loop Requirement)

Use a while True loop to display a menu:

1. Display Products
2. Add Product
3. Update Stock
4. Show Total Inventory Value
5. Exit


Take user input for choice.

Call the corresponding function.

Exit when user selects option 5.
products = [
    ("Laptop", 50000, 10),
    ("Mobile", 20000, 15),
    ("Headphones", 1500, 25)
]

# (a) Function to Display Products
def display_products():
    if not products:
        print("No products available.")
    else:
        print("\n--- Product List ---")
        for name, price, qty in products:
            print(f"Name: {name}, Price: {price}, Quantity: {qty}")

# (b) Function to Add a New Product
def add_product(name, price, qty):
    products.append((name, price, qty))
    print(f"Product '{name}' added successfully.")

# (c) Function to Update Stock Quantity
def update_stock(product_name, new_qty):
    global products
    updated = False
    new_products = []
    for name, price, qty in products:
        if name.lower() == product_name.lower():
            new_products.append((name, price, new_qty))
            updated = True
        else:
            new_products.append((name, price, qty))
    products = new_products
    if updated:
        print(f"Stock for '{product_name}' updated successfully.")
    else:
        print(f"Product '{product_name}' not found.")

# (d) Function to Calculate Total Inventory Value
def total_value():
    total = 0
    for name, price, qty in products:
        total += price * qty
    return total

#Menu driven program
while True:
    print("\n--- Product Inventory Management System ---")
    print("1. Display Products")
    print("2. Add Product")
    print("3. Update Stock")
    print("4. Show Total Inventory Value")
    print("5. Exit")

    choice = input("Enter your choice (1-5): ")

    if choice == "1":
        display_products()
    elif choice == "2":
        name = input("Enter product name: ")
        price = int(input("Enter product price: "))
        qty = int(input("Enter product quantity: "))
        add_product(name, price, qty)
    elif choice == "3":
        product_name = input("Enter product name to update: ")
        new_qty = int(input("Enter new quantity: "))
        update_stock(product_name, new_qty)
    elif choice == "4":
        print("Total Inventory Value:", total_value())
    elif choice == "5":
        print("Exiting program. Goodbye!")
        break
    else:
        print("Invalid choice. Please enter a number between 1 and 5.")
